  <div id="app">
        <div class="top-bar">
            <h2>Agregar Cliente</h2>
            <form id="form-cliente">
                <input type="text" id="nombre" placeholder="Nombre" required>
                <input type="text" id="direccion" placeholder="Dirección" required>
                <input type="text" id="horario" placeholder="Horario (opcional)">
                <input type="number" id="bultos" placeholder="Bultos" value="0" min="0">
                <button type="submit">➕ Agregar</button>
            </form>
            <hr>
            <div class="summary-and-filters-container">
                <div id="resumen-bultos">
                    <strong>Totales por color:</strong>
                    <ul>
                        <li style="color:red">🔴 Camion 1: <span id="suma-rojo">0</span> Bultos - <span id="clientes-rojo">0</span> Clientes - Cant. Máx. 400</li>
                        <li style="color:green">🟢 Camion 2: <span id="suma-verde">0</span> Bultos - <span id="clientes-verde">0</span> Clientes - Cant. Máx. 400</li>
                        <li style="color:#1E90FF">🔵 Camion 3: <span id="suma-azul">0</span> Bultos - <span id="clientes-azul">0</span> Clientes - Cant. Máx. 400</li>
                    </ul>
                    <hr>
                    <strong>Total Global:</strong>
                    <ul>
                        <li>📦 <span id="total-bultos-global">0</span> Bultos</li>
                        <li>👤 <span id="total-clientes-global">0</span> Clientes</li>
                    </ul>
                </div>

                <div class="filtros-fijos">
                    <div class="color-filter-buttons">
                        <button class="filtro-color active" data-color="">Todos</button>
                        <button class="filtro-color" data-color="border-red">🔴 Rojo</button>
                        <button class="filtro-color" data-color="border-green">🟢 Verde</button>
                        <button class="filtro-color" data-color="border-blue">🔵 Azul</button>
                        <button class="filtro-color" data-color="border-gray"># Sin Asignar</button>
                    </div>
                    <button id="seleccionar-todos">✅ Seleccionar todos</button>
                    <button id="deseleccionar-todos">❌ Deseleccionar todos</button>
                </div>
            </div>
            <input type="text" id="filtro-clientes" placeholder="Buscar cliente...">
        </div>

        <div class="main-content">
            <div class="checkbox-list">
                <input type="file" id="excelFile" accept=".xlsx, .xls" />
                <div id="checkboxes" class="clientes-scroll"></div>
           
            </div>
             

            <div id="map"></div>
        </div>
    </div>

    


<script>
// ÚNICA DEFINICIÓN DE applyColor - FUERA DE DOMContentLoaded
function applyColor(elementDiv, color) {
    elementDiv.classList.remove('border-red', 'border-green', 'border-blue', 'border-gray', 'border-default');

    if (color === '#DC143C') {
        elementDiv.classList.add('border-red');
    } else if (color === 'green') {
        elementDiv.classList.add('border-green');
    } else if (color === '#1E90FF') {
        elementDiv.classList.add('border-blue');
    } else if (color === '#708090') {
        elementDiv.classList.add('border-gray');
    } else {
        elementDiv.classList.add('border-default');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const map = L.map('map').setView([-34.53423856357239, -58.54456614470144], 11);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    // Punto fijo de salida (ej: panadería)
    const puntoSalida = {
        lat: -34.53423856357239,
        lng: -58.54456614470144
    };

    const iconoSalida = L.divIcon({
        className: 'custom-marker',
        html: `<i class="fa-solid fa-industry" style="color: orange; font-size: 20px;"></i>`,
        iconSize: [20, 20],
        iconAnchor: [10, 20]
    });

    const markerSalida = L.marker([puntoSalida.lat, puntoSalida.lng], { icon: iconoSalida })
        .addTo(map)
        .bindPopup("🏠 Punto de Salida");

    // 👉 Tooltip que aparece al pasar el mouse
    markerSalida.bindTooltip("Trigo House", {
        permanent: false, // aparece solo con hover
        direction: 'top',
        className: 'tooltip-cliente'
    });

    let markers = {};

    function updateMarker(c, color, bultos) {
        if (markers[c.nombre]) map.removeLayer(markers[c.nombre]);
        const icon = L.divIcon({
            className: 'custom-marker',
            html: `<i class="fa fa-map-marker" style="color:${color}; font-size:24px;"></i>`,
            iconSize: [24, 24],
            iconAnchor: [12, 24]
        });
        markers[c.nombre] = L.marker([c.lat, c.lng], { icon }).addTo(map);

        // 👉 Agregamos el tooltip al marcador del cliente
        const direccionCorta = c.direccion?.split(',')[0] || '';

        markers[c.nombre].bindTooltip(`
            <div style="font-size: 13px; line-height: 1.4; max-width: 220px;">
                <strong style="text-transform: uppercase;">${c.nombre}</strong><br>
                <span style="color: #333;">📍 ${direccionCorta}</span>
                <span style="color: #666;">📦 ${bultos} bultos</span>
            </div>
        `, {
            permanent: false,
            direction: 'top',
            className: 'tooltip-cliente'
        });
    }

    function removeMarker(c) {
        if (markers[c.nombre]) map.removeLayer(markers[c.nombre]);
    }

    const drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    const drawControl = new L.Control.Draw({
        draw: { polygon: true, polyline: false, rectangle: true, circle: false, marker: false, circlemarker: false },
        edit: { featureGroup: drawnItems }
    });
    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (event) {
        const layer = event.layer;
        drawnItems.addLayer(layer);

        const nombreZona = prompt('Nombre de la zona:');
        const color = prompt('Color (ej: blue, red, green):');
        const original = layer.getLatLngs();
        const coordenadas = original.map(anillo => anillo.map(p => [p.lat, p.lng]));

        if (nombreZona && coordenadas.length) {
            fetch('/api/zonas', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ nombre: nombreZona, coordenadas, color })
            }).then(res => {
                if (res.ok) {
                    alert(`✅ Zona "${nombreZona}" con color "${color}" guardada`);
                    layer.bindPopup(`Zona: ${nombreZona}`).openPopup();
                } else {
                    alert('❌ Error al guardar la zona');
                }
            });
        }
    });

    fetch('/api/zonas')
        .then(res => res.json())
        .then(zonas => {
            zonas.forEach(zona => {
                const coords = zona.coordenadas.map(anillo => anillo.map(p => [p[0], p[1]]));
                const popupContent = document.createElement('div');
                popupContent.innerHTML = `
                    <strong>Zona: ${zona.nombre}</strong><br>
                    <button class="btn-eliminar-zona" data-id="${zona._id}">🗑️ Eliminar</button>
                `;
                const poligono = L.polygon(coords, { color: zona.color, fillColor: zona.color, fillOpacity: 0.2 })
                    .addTo(map).bindPopup(popupContent);
                popupContent.querySelector('.btn-eliminar-zona').addEventListener('click', () => {
                    if (confirm('¿Eliminar esta zona?')) {
                        fetch(`/api/zonas/${zona._id}`, { method: 'DELETE' }).then(res => {
                            if (res.ok) {
                                alert('✅ Zona eliminada');
                                location.reload();
                            } else alert('❌ Error al eliminar zona');
                        });
                    }
                });
            });
        });

    document.getElementById('form-cliente').addEventListener('submit', async (e) => {
        e.preventDefault();
        const nombre = document.getElementById('nombre').value.trim();
        const direccion = document.getElementById('direccion').value.trim();
        const horario = document.getElementById('horario').value.trim();
        const bultos = parseInt(document.getElementById('bultos')?.value.trim()) || 0;

        if (!nombre || !direccion || isNaN(bultos)) return alert('Completá todos los campos obligatorios.');

        try {
            const res = await fetch('/nuevo', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({ nombre, direccion, horario, bultos })
            });
            res.ok ? location.reload() : alert('❌ Error al agregar cliente');
        } catch (err) {
            alert('❌ Error al agregar cliente');
        }
    });

    fetch('/api/clientes')
        .then(res => res.json())
        .then(clientes => {
            window.clientesData = clientes;
            const contenedor = document.getElementById('checkboxes');
            clientes.forEach(cliente => {
                const div = document.createElement('div');
                div.classList.add('cliente-info', 'fila-cliente'); 

                // El color inicial por defecto es gris
                const initialColor = cliente.color || '#708090'; 
                applyColor(div, initialColor); // Aplicar el color inicial al div

                div.innerHTML = `
                    <input type="checkbox" class="cliente-checkbox" id="${cliente.nombre}">
                    <div class="info-izq">
                        <strong>${cliente.nombre}</strong>
                        <div>🕒 ${cliente.horario || 'Sin horario'}</div>
                        <div>📦 <input type="number" value="${cliente.bultos || 0}" min="0" style="width:50px;"> bultos</div>
                        <input type="hidden" id="color-${cliente.nombre}" value="${initialColor}"> 
                    </div>
                    <div class="info-der">
                        🎨
                        <div class="color-options">
                            <button class="color-btn" data-color="#DC143C" style="background:#DC143C;"></button>
                            <button class="color-btn" data-color="green" style="background:green;"></button>
                            <button class="color-btn" data-color="#1E90FF" style="background:#1E90FF;"></button>
                            <button class="color-btn" data-color="#708090" style="background:#708090;"></button>
                        </div>
                    </div>
                `;

                contenedor.appendChild(div);

                const checkbox = div.querySelector('.cliente-checkbox');
                const colorInput = div.querySelector('input[type="hidden"]');
                const bultosInput = div.querySelector('input[type="number"]');

                bultosInput.addEventListener('input', () => {
    if (checkbox.checked) {
        const color = colorInput.value;
        const clienteData = window.clientesData?.find(c => c.nombre === cliente.nombre);
        if (clienteData) {
            updateMarker(clienteData, color, bultosInput.value);
            actualizarTotales();
        }
    }
});


                const colorButtons = div.querySelectorAll('.color-btn');

                colorButtons.forEach(btn => {
                    btn.addEventListener('click', () => {
                        const color = btn.dataset.color;
                        colorInput.value = color; // Actualiza el valor del input hidden
                        applyColor(div, color); // Aplica el color visual al div
                        if (checkbox.checked) updateMarker(cliente, color, bultosInput.value);
                        actualizarTotales();
                    });
                });

 checkbox.addEventListener('change', () => {
                    let color = colorInput.value;
                    if (checkbox.checked) {
                        if (div.classList.contains('border-default') || color !== '#DC143C' && color !== 'green' && color !== '#1E90FF') {
                             color = '#708090';
                             colorInput.value = color;
                        }
                        applyColor(div, color);
                        updateMarker(cliente, color, bultosInput.value);
                    } else {
                        removeMarker(cliente);
                        // ✅ Al desmarcar, también aseguramos que el color visual vuelva a default
                        color = ''; // o null si preferís
                        colorInput.value = color;
                        applyColor(div, '');
                    }
                    actualizarTotales();
                });

                // ✅ Color inicial default si está destildado
if (!checkbox.checked) {
    colorInput.value = '';
    applyColor(div, '');
}

                // Hover directo sin click
                div.addEventListener('mouseover', () => markers[cliente.nombre]?._icon?.classList.add('hovered'));
                div.addEventListener('mouseleave', () => markers[cliente.nombre]?._icon?.classList.remove('hovered'));

                setTimeout(() => {
                    const rect = div.getBoundingClientRect();
                    const x = window.event?.clientX;
                    const y = window.event?.clientY;
                    if (x && y && x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom)
                        markers[cliente.nombre]?._icon?.classList.add('hovered');
                }, 100);
            });

            new Sortable(contenedor, { animation: 150, ghostClass: 'drag-ghost' });
        });


    function actualizarTotales() {
        let rojoBultos = 0, verdeBultos = 0, azulBultos = 0;
        let rojoClientes = 0, verdeClientes = 0, azulClientes = 0;
        let totalBultosGlobal = 0;
        let totalClientesGlobal = 0;

        document.querySelectorAll('.cliente-info').forEach(div => {
            const checkbox = div.querySelector('.cliente-checkbox');

            if (checkbox.checked) { // Solo si el cliente está seleccionado
                const color = div.querySelector('input[type="hidden"]').value;
                const bultos = parseInt(div.querySelector('input[type="number"]').value) || 0;

                if (color === '#DC143C') { // Rojo
                    rojoBultos += bultos;
                    rojoClientes++;
                } else if (color === 'green') { // Verde
                    verdeBultos += bultos;
                    verdeClientes++;
                } else if (color === '#1E90FF') { // Azul
                    azulBultos += bultos;
                    azulClientes++;
                }
                // Los bultos y clientes "por seleccionar" (gris) también contribuyen al total global
                totalBultosGlobal += bultos;
                totalClientesGlobal++;
            }
        });

        // Actualizar los SPANs por color
        document.getElementById('suma-rojo').textContent = rojoBultos;
        document.getElementById('clientes-rojo').textContent = rojoClientes;

        document.getElementById('suma-verde').textContent = verdeBultos;
        document.getElementById('clientes-verde').textContent = verdeClientes;

        document.getElementById('suma-azul').textContent = azulBultos;
        document.getElementById('clientes-azul').textContent = azulClientes;

        // Actualizar los SPANs globales
        document.getElementById('total-bultos-global').textContent = totalBultosGlobal;
        document.getElementById('total-clientes-global').textContent = totalClientesGlobal;
    }


    const filtroInput = document.getElementById("filtro-clientes");
    const listaClientes = document.getElementById("checkboxes");

    filtroInput.addEventListener("input", () => {
        const filtro = filtroInput.value.toLowerCase();
        const clientes = listaClientes.querySelectorAll(".cliente-info");
        clientes.forEach(cliente => {
            const texto = cliente.textContent.toLowerCase();
            cliente.style.display = texto.includes(filtro) ? "flex" : "none";
        });
    });

    // 🎨 Filtro por color (botones)
    document.querySelectorAll('.filtro-color').forEach(btn => {
        btn.addEventListener('click', () => {
            const colorClase = btn.dataset.color; // Ej: "border-red", "border-gray", "" (para todos)
            document.querySelectorAll('.cliente-info').forEach(clienteDiv => {
                if (!colorClase) { // "Todos"
                    clienteDiv.style.display = "flex";
                } else if (clienteDiv.classList.contains(colorClase)) {
                    clienteDiv.style.display = "flex";
                } else {
                    clienteDiv.style.display = "none";
                }
            });
            // Limpiar el input para evitar doble filtro
            filtroInput.value = "";
        });
    });

    document.getElementById('seleccionar-todos').addEventListener('click', () => {
        document.querySelectorAll('.cliente-info').forEach(div => {
            const checkbox = div.querySelector('.cliente-checkbox');
            const colorInput = div.querySelector('input[type="hidden"]');
            const bultosInput = div.querySelector('input[type="number"]');

            if (!checkbox.checked) checkbox.checked = true;

            let color = colorInput.value;
            // Si el div tiene la clase 'border-default' o el colorInput no es un color de camión,
            // asigna gris. Esto es para cuando se seleccionan "todos" y algunos no tienen color.
            if (div.classList.contains('border-default') || (color !== '#DC143C' && color !== 'green' && color !== '#1E90FF')) {
                 color = '#708090'; // Color gris
                 colorInput.value = color; // Actualiza el input hidden
            }
            
            const bultos = parseInt(bultosInput.value) || 0;
            const nombre = checkbox.id;

            applyColor(div, color);

            const cliente = { nombre, lat: 0, lng: 0, horario: '', zona: '' };
            const realCliente = window.clientesData?.find(c => c.nombre === nombre);
            if (realCliente) {
                cliente.lat = realCliente.lat;
                cliente.lng = realCliente.lng;
                cliente.horario = realCliente.horario;
                cliente.zona = realCliente.zona;
                cliente.direccion = realCliente.direccion;
            }
            updateMarker(cliente, color, bultos);
        });
        actualizarTotales();
    });
document.getElementById('deseleccionar-todos').addEventListener('click', () => {
    document.querySelectorAll('.cliente-info').forEach(div => {
        const checkbox = div.querySelector('.cliente-checkbox');
        const colorInput = div.querySelector('input[type="hidden"]');
        checkbox.checked = false;

        // Volver al color default visualmente y en el input hidden
        colorInput.value = '';
        applyColor(div, '');

        // Quitar marcador del mapa
        const nombre = checkbox.id;
        const cliente = window.clientesData?.find(c => c.nombre === nombre);
        if (cliente) removeMarker(cliente);
    });
    actualizarTotales();
});


    document.getElementById('excelFile').addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        if (typeof XLSX === 'undefined') {
            console.error('XLSX library not loaded. Please include it in your HTML.');
            return;
        }

        const data = await file.arrayBuffer();
        const workbook = XLSX.read(data);
        const hoja = workbook.Sheets[workbook.SheetNames[0]];
        const filasRaw = XLSX.utils.sheet_to_json(hoja, { defval: "" });

        console.log("Raw Excel Data:", filasRaw);

        const porCliente = filasRaw.reduce((acc, f) => {
            const nombre = (f["Cliente"] || "").trim();
            const bultos = parseInt(f["Cantidad"] ?? f["Cant. a Despachar"] ?? 0);

            if (!nombre) return acc;
            acc[nombre] = (acc[nombre] || 0) + (isNaN(bultos) ? 0 : bultos);
            return acc;
        }, {});

        let clientesNoEncontrados = [];

        Object.entries(porCliente).forEach(([nombre, totalBultos]) => {
            const checkboxElement = document.getElementById(nombre);
            if (!checkboxElement) {
                clientesNoEncontrados.push(nombre);
                return;
            }

            const divCli = checkboxElement.closest('.cliente-info');
            if (!divCli) return;

            const check = divCli.querySelector('.cliente-checkbox');
            const bultosInput = divCli.querySelector('input[type="number"]');
            const colorHidden = divCli.querySelector('input[type="hidden"]');
            
            // Si el cliente no tiene un color de camión asignado (es decir, el color es default o gris),
            // se le asigna gris. Si ya tiene un color (rojo, verde, azul), se mantiene.
            let colorToApply = colorHidden.value;
            if (colorToApply !== '#DC143C' && colorToApply !== 'green' && colorToApply !== '#1E90FF') {
                 colorToApply = '#708090'; // Color gris
                 colorHidden.value = colorToApply; // Asegura que el hidden input también tenga el gris
            }

            check.checked = true;
            bultosInput.value = totalBultos;
            

            applyColor(divCli, colorToApply);

            const clienteData = window.clientesData?.find(c => c.nombre === nombre);
            if (clienteData) {
                updateMarker(clienteData, colorToApply, totalBultos);
            } else {
                console.warn(`Could not find full data for client "${nombre}" in window.clientesData.`);
            }
        });

        if (clientesNoEncontrados.length > 0) {
            const modalHtml = `
                <div id="modal-clientes-no-encontrados" style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
                    <div style="background: white; padding: 20px; border-radius: 8px; max-width: 400px; width: 90%; box-shadow: 0 2px 10px rgba(0,0,0,0.3);">
                        <h3 style="margin-top: 0;">Clientes no encontrados</h3>
                        <ul style="max-height: 200px; overflow-y: auto; padding-left: 20px;">
                            ${clientesNoEncontrados.map(nombre => `<li>${nombre}</li>`).join('')}
                        </ul>
                        <button onclick="document.getElementById('modal-clientes-no-encontrados').remove()" style="margin-top: 10px;">Cerrar</button>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
        actualizarTotales();
    });

    const checkboxesDiv = document.querySelector(".checkbox-list");
    const scrollTopBtn = document.getElementById("scrollTopBtn");

    if (checkboxesDiv && scrollTopBtn) {
        checkboxesDiv.addEventListener("scroll", () => {
            scrollTopBtn.style.display = checkboxesDiv.scrollTop > 100 ? "block" : "none";
        });

        scrollTopBtn.addEventListener("click", () => {
            checkboxesDiv.scrollTo({ top: 0, behavior: 'smooth' });
        });
    } else {
        console.warn("Could not find 'checkboxes' div or 'scrollTopBtn'. Scroll to top functionality may not work.");
    }
});
</script>